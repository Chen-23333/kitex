// Package tpl .
package tpl

import "strings"

var (
	invokerOptionTpl []string
	invokerExtendTpl []string
)

// GetInvokerTpl returns  the template for generating invoker.go.
func GetInvokerTpl() string {
	return `// Code generated by Kitex {{.Version}}. DO NOT EDIT.

package {{ToLower .ServiceName}}

import (
	{{- range $path, $alias := .Imports}}
	{{$alias }}"{{$path}}"
	{{- end}}
)

// NewInvoker creates a server.Invoker with the given handler and options.
func NewInvoker(handler {{call .ServiceTypeName}}, opts ...server.Option) server.Invoker {
	var options []server.Option
	` + strings.Join(invokerOptionTpl, "\n") + `
	options = append(options, opts...)

    s := server.NewInvoker(options...)
    if err := s.RegisterService(serviceInfo(), handler); err != nil {
            panic(err)
	}
	if err := s.Init(); err != nil {
		panic(err)
	}
    return s
}
` + strings.Join(invokerExtendTpl, "\n")
}
